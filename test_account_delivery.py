#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤—ã–¥–∞—á–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ mark_account_sold()
"""

import sys
import os
sys.path.append('.')

from database.database import Database

def test_account_delivery():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –≤—ã–¥–∞—á–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    
    print("üß™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –í–´–î–ê–ß–ò –ê–ö–ö–ê–£–ù–¢–û–í")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = Database('test_accounts.db')
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ—Ç
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–æ—Ç–∞...")
    account_id = db.add_account("–¢–µ—Å—Ç–æ–≤—ã–π –ª–æ—Ç VEO3", 10.0)
    print(f"‚úÖ –õ–æ—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {account_id}")
    
    # 2. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏
    print("\n2Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤...")
    test_logs = [
        "login1:password1:email1@test.com",
        "user2:pass2:backup2@test.com", 
        "testuser3:secret3:mail3@test.com",
        "account4:12345:reserve4@test.com",
        "veo3user5:qwerty:contact5@test.com"
    ]
    
    for i, log in enumerate(test_logs, 1):
        db.add_credential(account_id, log)
        print(f"   ‚ûï –õ–æ–≥ {i}: {log[:20]}...")
    
    available = db.count_available_credentials(account_id)
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {available} –ª–æ–≥–æ–≤")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø—Ä–æ–¥–∞–∂
    print("\n3Ô∏è‚É£ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ—Ç–∞ –¥–æ –ø—Ä–æ–¥–∞–∂:")
    account_info = db.get_account(account_id)
    print(f"   –õ–æ—Ç: {account_info[1]}")
    print(f"   –¶–µ–Ω–∞: {account_info[2]} USDT")
    print(f"   –î–æ—Å—Ç—É–ø–µ–Ω: {'–î–∞' if account_info[3] else '–ù–µ—Ç'}")
    print(f"   –õ–æ–≥–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: {available}")
    
    # 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏
    print("\n4Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∫—É–ø–æ–∫:")
    test_users = [
        (12345, "user1"),
        (12346, "user2"), 
        (12347, "user3"),
        (12348, "user4"),
        (12349, "user5")
    ]
    
    delivered_logs = []
    
    for user_id, username in test_users:
        print(f"\n   üõí –ü–æ–∫—É–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username} (ID: {user_id}):")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        before_count = db.count_available_credentials(account_id)
        print(f"      üìä –õ–æ–≥–æ–≤ –¥–æ –ø–æ–∫—É–ø–∫–∏: {before_count}")
        
        if before_count == 0:
            print("      ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–≥–æ–≤!")
            break
            
        # –í—ã–¥–∞–µ–º –ª–æ–≥
        success, delivered_details = db.mark_account_sold(account_id, user_id, 10.0)
        
        if success:
            print(f"      ‚úÖ –õ–æ–≥ –≤—ã–¥–∞–Ω: {delivered_details}")
            delivered_logs.append((user_id, username, delivered_details))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–¥–∞—á–∏
            after_count = db.count_available_credentials(account_id)
            print(f"      üìä –õ–æ–≥–æ–≤ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: {after_count}")
            
        else:
            print("      ‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ª–æ–≥–∞!")
    
    # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\n5Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:")
    account_info = db.get_account(account_id)
    remaining = db.count_available_credentials(account_id)
    
    print(f"   –õ–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {'–î–∞' if account_info[3] else '–ù–µ—Ç'}")
    print(f"   –û—Å—Ç–∞–≤—à–∏—Ö—Å—è –ª–æ–≥–æ–≤: {remaining}")
    print(f"   –ü—Ä–æ–¥–∞–Ω–æ –ª–æ–≥–æ–≤: {len(delivered_logs)}")
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã:")
    unique_logs = set(log[2] for log in delivered_logs)
    if len(unique_logs) == len(delivered_logs):
        print("   ‚úÖ –í—Å–µ –≤—ã–¥–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã!")
    else:
        print("   ‚ùå –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –ª–æ–≥–æ–≤!")
    
    # 7. –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n7Ô∏è‚É£ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—ã–¥–∞–Ω–Ω—ã–º –ª–æ–≥–∞–º:")
    for user_id, username, log in delivered_logs:
        print(f"   üë§ {username} (ID: {user_id}) ‚Üí {log}")
    
    # 8. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ—Ç–∞
    print("\n8Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ—Ç–∞:")
    stats = db.get_lot_statistics(account_id)
    if stats:
        print(f"   üìä –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: {stats['total_logs']}")
        print(f"   ‚úÖ –ü—Ä–æ–¥–∞–Ω–æ: {stats['sold_logs']} ")
        print(f"   üìé –î–æ—Å—Ç—É–ø–Ω–æ: {stats['available_logs']}")
        print(f"   üí∞ –î–æ—Ö–æ–¥: {stats['total_revenue']} USDT")
    
    # 9. –ü–æ–ø—ã—Ç–∫–∞ –∫—É–ø–∏—Ç—å –∫–æ–≥–¥–∞ –Ω–µ—Ç –ª–æ–≥–æ–≤
    if remaining == 0:
        print("\n9Ô∏è‚É£ –¢–µ—Å—Ç: –ø–æ–∫—É–ø–∫–∞ –∫–æ–≥–¥–∞ –ª–æ–≥–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å:")
        success, details = db.mark_account_sold(account_id, 99999, 10.0)
        if not success:
            print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –ø–æ–∫—É–ø–∫—É - –ª–æ–≥–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")
        else:
            print("   ‚ùå –û–®–ò–ë–ö–ê: –°–∏—Å—Ç–µ–º–∞ –≤—ã–¥–∞–ª–∞ –ª–æ–≥ –∫–æ–≥–¥–∞ –∏—Ö –Ω–µ—Ç!")
    
    print("\n" + "=" * 50)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    if len(delivered_logs) == len(test_logs) and len(unique_logs) == len(delivered_logs):
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –ö–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–¥–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥")
        print("‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –∏—Å–∫–ª—é—á–µ–Ω—ã")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–æ–≥–æ–≤")
    else:
        print("‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –°–ò–°–¢–ï–ú–ï!")
    
    print("\nüóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    try:
        os.remove('test_accounts.db')
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")
    except:
        pass

if __name__ == "__main__":
    test_account_delivery()