import os
import json
import ssl
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from dotenv import load_dotenv
from database.database import Database
from payments.cryptobot import CryptoBot

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_USERNAME = os.getenv('ADMIN_USERNAME')
ADMIN_USER_ID = os.getenv('ADMIN_USER_ID')  # optional numeric user id as string
PAYMENT_CONTACT = '@eqtexw'

# Initialize database
db = Database('accounts.db')

# Constants for CryptoBot
CRYPTO_BOT_USERNAME = "@CryptoBot"
CRYPTO_BOT_TOKEN = os.getenv('CRYPTO_BOT_TOKEN')  # –¢–æ–∫–µ–Ω –æ—Ç CryptoBot
CRYPTO_BOT_API = "https://pay.crypt.bot/api"
CRYPTO_ASSET = os.getenv('CRYPTO_ASSET', 'USDT')  # e.g., USDT, TON, BTC, ETH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä—É–±–ª–µ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
USDT_TO_RUB_RATE = float(os.getenv('USDT_TO_RUB_RATE', '95'))  # –ö—É—Ä—Å USDT –∫ —Ä—É–±–ª—é
RUB_PAYMENT_CONTACT = os.getenv('RUB_PAYMENT_CONTACT', '@eqtexw')  # –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Ä—É–±–ª–µ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–∞—Ä–∫–æ–≤
BOT_USERNAME = os.getenv('BOT_USERNAME', '@your_bot_username')  # Username –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
DELIVERY_TEMPLATE = os.getenv(
    'DELIVERY_TEMPLATE',
    (
        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
        "üéÆ –ê–∫–∫–∞—É–Ω—Ç #{account_id}\n"
        "üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞: {details}\n"
        "üí∞ –¶–µ–Ω–∞: {price} {asset}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ"
    )
)

def _normalize_username(name: str) -> str:
    if not name:
        return ""
    name = name.strip()
    if name.startswith('@'):
        name = name[1:]
    return name.lower()

def _is_admin(user) -> bool:
    try:
        username_ok = _normalize_username(getattr(user, 'username', '')) == _normalize_username(ADMIN_USERNAME)
        id_ok = False
        if ADMIN_USER_ID:
            try:
                id_ok = str(getattr(user, 'id', '')) == str(ADMIN_USER_ID)
            except Exception:
                id_ok = False
        return bool(username_ok or id_ok)
    except Exception:
        return False

def _set_admin_user_id(user_id: int) -> None:
    global ADMIN_USER_ID
    ADMIN_USER_ID = str(user_id)
    try:
        # Rewrite or append ADMIN_USER_ID in .env
        env_path = '.env'
        lines = []
        if os.path.exists(env_path):
            with open(env_path, 'r', encoding='utf-8') as f:
                lines = f.read().splitlines()
        written = False
        for i, line in enumerate(lines):
            if line.startswith('ADMIN_USER_ID='):
                lines[i] = f'ADMIN_USER_ID={ADMIN_USER_ID}'
                written = True
                break
        if not written:
            lines.append(f'ADMIN_USER_ID={ADMIN_USER_ID}')
        with open(env_path, 'w', encoding='utf-8') as f:
            f.write('\n'.join(lines) + ('\n' if lines and lines[-1] != '' else ''))
    except Exception as e:
        logger.error(f"Failed to persist ADMIN_USER_ID: {e}")

def render_delivery_message(account_id: int, details: str, price: float) -> str:
    try:
        return DELIVERY_TEMPLATE.format(
            account_id=account_id,
            details=details,
            price=price,
            asset=CRYPTO_ASSET
        )
    except Exception:
        # Fallback to a safe default if admin template is malformed
        return (
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            f"üéÆ –ê–∫–∫–∞—É–Ω—Ç #{account_id}\n"
            f"üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞: {details}\n"
            f"üí∞ –¶–µ–Ω–∞: {price} {CRYPTO_ASSET}\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ"
        )

async def notify_admin_about_depletion(context: ContextTypes.DEFAULT_TYPE, account_id: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –∑–∞–∫–æ–Ω—á–∏–≤—à–∏—Ö—Å—è –∞–∫–∫–∞—É–Ω—Ç–∞—Ö –≤ –ª–æ—Ç–µ"""
    if not ADMIN_USER_ID:
        return
    
    try:
        account = db.get_account(account_id)
        if not account:
            return
        
        queue_size = db.get_queue_size(account_id)
        
        if queue_size > 0:
            notification_text = (
                f"‚ö†Ô∏è **–ê–ö–ö–ê–£–ù–¢–´ –ó–ê–ö–û–ù–ß–ò–õ–ò–°–¨!**\n\n"
                f"üéÆ **–õ–æ—Ç:** {account[1]}\n"
                f"üî¢ **ID:** #{account_id}\n"
                f"üí∞ **–¶–µ–Ω–∞:** {account[2]} {CRYPTO_ASSET}\n\n"
                f"üì¶ **–û—Å—Ç–∞–ª–æ—Å—å –ª–æ–≥–æ–≤:** 0\n"
                f"üë• **–í –æ—á–µ—Ä–µ–¥–∏:** {queue_size} —á–µ–ª–æ–≤–µ–∫\n\n"
                f"üöÄ **–ù–£–ñ–ù–û –ü–û–ü–û–õ–ù–ò–¢–¨ –õ–û–¢!**\n"
                f"‚è≥ –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ –∂–¥—É—Ç –≤—ã–¥–∞—á–∏"
            )
        else:
            notification_text = (
                f"üì¶ **–õ–æ—Ç –æ–ø—É—Å—Ç–æ—à–µ–Ω**\n\n"
                f"üéÆ **–õ–æ—Ç:** {account[1]}\n"
                f"üî¢ **ID:** #{account_id}\n"
                f"üí∞ **–¶–µ–Ω–∞:** {account[2]} {CRYPTO_ASSET}\n\n"
                f"üì¶ **–û—Å—Ç–∞–ª–æ—Å—å –ª–æ–≥–æ–≤:** 0\n"
                f"üë• **–í –æ—á–µ—Ä–µ–¥–∏:** {queue_size} —á–µ–ª–æ–≤–µ–∫"
            )
        
        await context.bot.send_message(
            int(ADMIN_USER_ID), 
            notification_text, 
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Failed to notify admin about depletion: {e}")

async def process_purchase_queue(context: ContextTypes.DEFAULT_TYPE, account_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –ª–æ—Ç–∞"""
    try:
        queue_entries = db.process_queue_for_lot(account_id)
        account = db.get_account(account_id)
        
        if not account or not queue_entries:
            return
        
        processed_count = 0
        
        for entry in queue_entries:
            queue_id, user_id, payment_type, price_usdt, price_rub, username, invoice_id, payment_status = entry
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∑–∞ —Ä—É–±–ª–∏
            if payment_type == "rub" and payment_status != "paid":
                continue
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ-–∑–∞–∫–∞–∑—ã
            if payment_type == "crypto" and payment_status != "paid":
                continue
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
            success, delivered_details, accounts_depleted = db.mark_account_sold(account_id, user_id, price_usdt)
            
            if success:
                # –û—Ç–º–µ—á–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                db.mark_queue_entry_fulfilled(queue_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                delivery_message = render_delivery_message(account_id, delivered_details, price_usdt)
                await context.bot.send_message(user_id, delivery_message)
                
                processed_count += 1
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –∏–∑ bot_data
                for key in list(context.bot_data.keys()):
                    if (key.startswith(f"payment_{user_id}_{account_id}") or 
                        key.startswith(f"rub_order_{user_id}_{account_id}")):
                        context.bot_data.pop(key, None)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏ —Å–Ω–æ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç—ã
                if accounts_depleted:
                    await notify_admin_about_depletion(context, account_id)
                    break
            else:
                # –ù–µ—Ç –±–æ–ª—å—à–µ –ª–æ–≥–æ–≤ - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                break
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        if processed_count > 0 and ADMIN_USER_ID:
            remaining_queue = db.get_queue_size(account_id)
            remaining_accounts = db.count_available_credentials(account_id)
            
            notification = (
                f"‚úÖ **–û–ß–ï–†–ï–î–¨ –û–ë–†–ê–ë–û–¢–ê–ù–ê!**\n\n"
                f"üéÆ **–õ–æ—Ç:** {account[1]} (#{account_id})\n"
                f"‚úÖ **–í—ã–¥–∞–Ω–æ:** {processed_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
                f"üì¶ **–û—Å—Ç–∞–ª–æ—Å—å –ª–æ–≥–æ–≤:** {remaining_accounts}\n"
                f"üë• **–û—Å—Ç–∞–ª–æ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏:** {remaining_queue}"
            )
            
            await context.bot.send_message(
                int(ADMIN_USER_ID),
                notification,
                parse_mode='Markdown'
            )
        
    except Exception as e:
        logger.error(f"Error processing purchase queue: {e}")

# –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤
PENDING_PAYMENT = "pending"
PAID = "paid"
COMPLETED = "completed"

# Keyboard markups
def get_main_keyboard(is_admin: bool):
    keyboard = [
        [KeyboardButton("üëÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ—Ç—ã")],
        [KeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫")],
        [KeyboardButton("üîç –ü–æ–º–æ—â—å"), KeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ]
    
    if is_admin:
        keyboard.extend([
            [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ—Ç"), KeyboardButton("üîÑ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –ª–æ—Ç")],
            [KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ª–æ—Ç")],
            [KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üíµ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É")],
            [KeyboardButton("üìÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫")]
        ])
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_account_keyboard(account_id: int, price: float):
    keyboard = [
        [InlineKeyboardButton("üìé –ö—É–ø–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot (USDT)", callback_data=f"buy_crypto_{account_id}")],
        [InlineKeyboardButton("üíµ –ö—É–ø–∏—Ç—å –∑–∞ —Ä—É–±–ª–∏", callback_data=f"buy_rub_{account_id}")],
        [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"https://t.me/{PAYMENT_CONTACT[1:]}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_accounts")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –£–¥–∞–ª–µ–Ω–æ: —Ñ—É–Ω–∫—Ü–∏—è get_crypto_keyboard –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
# —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ CryptoBot

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    user = update.effective_user
    is_admin = _is_admin(user)
    
    welcome_text = (
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VEO3 AI, {user.first_name}!\n\n"
        "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –∫ VEO3 ‚Äî –º–æ—â–Ω–æ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É –Ω–∞ –±–∞–∑–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.\n\n"
        "–ß—Ç–æ —É–º–µ–µ—Ç VEO3?\n"
        "üé¨ –°–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–¥–µ–æ: –û—Ç –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–ª–∏–ø–æ–≤ –¥–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö —Ä–æ–ª–∏–∫–æ–≤.\n"
        "üìù –ü–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã: –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å–∏, –ø–æ—Å—Ç—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è.\n"
        "üìà –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥: –£–ø—Ä–æ—â–∞—Ç—å —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø–æ–≤—ã—à–∞—Ç—å –æ—Ö–≤–∞—Ç—ã.\n"
        "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?\n"
        "‚ö°Ô∏è –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: –î–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É –ø—Ä–∏–¥–µ—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.\n"
        "üí≥ –ì–∏–±–∫–∞—è –æ–ø–ª–∞—Ç–∞: –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã –≤ USDT –∏–ª–∏ —Ä—É–±–ª—è—Ö.\n"
        "üõ°Ô∏è –ü–æ–ª–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏.\n"
        "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7: –ú—ã –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é."
    )
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=get_main_keyboard(is_admin)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Help command handler"""
    is_admin = _is_admin(update.effective_user)
    
    if is_admin:
        help_text = (
            "üîë –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n\n"
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ—Ç - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ª–æ—Ç —Å –ª–æ–≥–∞–º–∏\n"
            "üîÑ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –ª–æ—Ç - –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ—Ç\n"
            "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É - –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –ª–æ—Ç–∞\n"
            "‚ùå –£–¥–∞–ª–∏—Ç—å –ª–æ—Ç - —É–¥–∞–ª–∏—Ç—å –ª–æ—Ç\n"
            "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–æ—Ç–∞–º\n"
            "üíµ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä—É–±–ª–µ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n"
        )
    else:
        help_text = (
            "üéÜ **VEO3 AI - –ü–æ–ª—É—á–∏—Ç–µ –º–æ—â—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞!**\n\n"
            "üî• **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ VEO3:**\n"
            "‚Ä¢ üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ\n"
            "‚Ä¢ üìù –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤\n"
            "‚Ä¢ üá∫üá¶ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è\n"
            "‚Ä¢ üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
            "üìå **–ö–æ–º–∞–Ω–¥—ã:**\n"
            "üëÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ—Ç—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
            "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞ - —Å–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n\n"
            "üí≥ **–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:**\n"
            f"‚ö°Ô∏è {CRYPTO_BOT_USERNAME} (USDT) - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≤—ã–¥–∞—á–∞\n"
            f"üíµ –†—É–±–ª–∏ (–ö—É—Ä—Å: 1 USDT = {USDT_TO_RUB_RATE}‚ÇΩ) - —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n\n"
            "üöÄ **–ö–∞–∫ –∫—É–ø–∏—Ç—å:**\n"
            "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ª–æ—Ç\n"
            "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n"
            "3Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø!\n\n"
            "üéÅ –ü–æ–ª—É—á–∞–π—Ç–µ –º–∞–∫—Å–∏–º—É–º –æ—Ç VEO3 AI —Å–µ–≥–æ–¥–Ω—è!"
        )
    
    await update.message.reply_text(help_text)

async def whoami(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"username=@{_normalize_username(user.username)} id={user.id} admin={_is_admin(user)}"
    )

async def test_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not _is_admin(update.effective_user):
        await update.message.reply_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: /test_purchase ID_–ª–æ—Ç–∞
        args = context.args
        if not args:
            await update.message.reply_text(
                "üß™ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞:\n\n"
                "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ: /test_purchase ID_–ª–æ—Ç–∞\n"
                "üí° –ù–∞–ø—Ä–∏–º–µ—Ä: /test_purchase 1"
            )
            return
        
        lot_id = int(args[0])
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ—Ç
        account = db.get_account(lot_id)
        if not account:
            await update.message.reply_text(f"‚ùå –õ–æ—Ç #{lot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        if not account[3]:  # –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            await update.message.reply_text(f"‚ùå –õ–æ—Ç #{lot_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–≥–æ–≤
        available_logs = db.count_available_credentials(lot_id)
        if available_logs == 0:
            await update.message.reply_text(f"‚ùå –õ–æ—Ç #{lot_id} - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–≥–æ–≤.")
            return
        
        await update.message.reply_text(
            f"üß™ –¢–ï–°–¢–û–í–ê–Ø –ü–û–ö–£–ü–ö–ê\n\n"
            f"üéÆ –õ–æ—Ç: {account[1]}\n"
            f"üî¢ ID: {lot_id}\n"
            f"üí∞ –¶–µ–Ω–∞: {account[2]} USDT\n"
            f"üìé –û—Å—Ç–∞–ª–æ—Å—å –ª–æ–≥–æ–≤: {available_logs}\n\n"
            f"‚è≥ –°–∏–º—É–ª–∏—Ä—É—é –ø–æ–∫—É–ø–∫—É..."
        )
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
        success, delivered_details = db.mark_account_sold(lot_id, user_id, account[2])
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–¥–∞—á–µ
            delivery_message = render_delivery_message(lot_id, delivered_details, account[2])
            await update.message.reply_text(
                f"‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!\n\n{delivery_message}\n\n"
                f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ:\n"
                f"‚Ä¢ –õ–æ–≥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω\n"
                f"‚Ä¢ –ó–∞–ø–∏—Å–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n"
                f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –ª–æ–≥–æ–≤: {db.count_available_credentials(lot_id)}"
            )
        else:
            await update.message.reply_text(
                f"‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ª–æ–≥ –¥–ª—è –ª–æ—Ç–∞ #{lot_id}.\n"
                f"–í–æ–∑–º–æ–∂–Ω–æ, –ª–æ–≥–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å."
            )
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test_purchase ID_–ª–æ—Ç–∞")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}")

async def make_me_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if _normalize_username(user.username) == _normalize_username(ADMIN_USERNAME):
        _set_admin_user_id(user.id)
        await update.message.reply_text("‚úÖ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ ID. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
    else:
        await update.message.reply_text("‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

async def show_accounts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show available accounts"""
    accounts = db.get_available_accounts()
    
    if not accounts:
        await update.message.reply_text("üòî –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ—Ç–æ–≤.")
        return

    for account in accounts:
        account_id, details, price = account
        available_count = db.count_available_credentials(account_id)
        queue_size = db.get_queue_size(account_id)
        
        rub_price = int(price * USDT_TO_RUB_RATE)
        
        if available_count > 0:
            # –õ–æ—Ç —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
            message = (
                f"üéÜ **{details}** üéÜ\n"
                f"üî¢ ID –ª–æ—Ç–∞: {account_id}\n\n"
                f"üí∞ **–¶–µ–Ω–∞:**\n"
                f"‚Ä¢ {price} USDT\n"
                f"‚Ä¢ {rub_price} ‚ÇΩ\n\n"
                f"üìé **–î–æ—Å—Ç—É–ø–Ω–æ:** {available_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
                f"‚ö°Ô∏è **–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≤—ã–¥–∞—á–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã!**"
            )
        else:
            # –õ–æ—Ç –±–µ–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –Ω–æ —Å –æ—á–µ—Ä–µ–¥—å—é
            message = (
                f"‚è≥ **{details} - –û–ß–ï–†–ï–î–¨** ‚è≥\n"
                f"üî¢ ID –ª–æ—Ç–∞: {account_id}\n\n"
                f"üí∞ **–¶–µ–Ω–∞:**\n"
                f"‚Ä¢ {price} USDT\n"
                f"‚Ä¢ {rub_price} ‚ÇΩ\n\n"
                f"üì¶ **–ê–∫–∫–∞—É–Ω—Ç–æ–≤:** 0 (–∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å)\n"
                f"üë• **–í –æ—á–µ—Ä–µ–¥–∏:** {queue_size} —á–µ–ª.\n\n"
                f"üí° **–ú–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∏ –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å!**\n"
                f"‚ö°Ô∏è **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏!**"
            )
        
        await update.message.reply_text(
            message,
            reply_markup=get_account_keyboard(account_id, price),
            parse_mode='Markdown'
        )

async def add_logs_to_existing_lot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Add logs to existing lot handler"""
    if not _is_admin(update.effective_user):
        u = update.effective_user
        logger.warning(f"Admin denied: username=@{_normalize_username(getattr(u,'username',''))} id={getattr(u,'id',None)}")
        await update.message.reply_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    msg = update.message.text
    if msg == "üîÑ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –ª–æ—Ç":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ—Ç–æ–≤
        accounts = db.get_available_accounts()
        if not accounts:
            await update.message.reply_text("üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")
            return
        
        lots_text = "üîÑ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–æ—Ç–∞:\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ª–æ—Ç–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n"
        
        for account in accounts:
            account_id, details, price = account
            available_count = db.count_available_credentials(account_id)
            lots_text += f"‚Ä¢ ID {account_id}: {details} (–æ—Å—Ç–∞–ª–æ—Å—å: {available_count} –ª–æ–≥–æ–≤)\n"
        
        lots_text += "\nüî¢ –ù–∞–ø—Ä–∏–º–µ—Ä: 1"
        
        context.user_data["awaiting_lot_refill"] = True
        await update.message.reply_text(lots_text)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ª–æ—Ç–∞
    if context.user_data.get("awaiting_lot_refill") and msg.isdigit():
        lot_id = int(msg)
        account = db.get_account(lot_id)
        
        if not account:
            await update.message.reply_text("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        context.user_data["awaiting_lot_refill"] = False
        context.user_data["current_account_id"] = lot_id
        
        available_count = db.count_available_credentials(lot_id)
        await update.message.reply_text(
            f"‚úÖ –õ–æ—Ç –≤—ã–±—Ä–∞–Ω!\n\n"
            f"üéÆ –ù–∞–∑–≤–∞–Ω–∏–µ: {account[1]}\n"
            f"üí∞ –¶–µ–Ω–∞: {account[2]} {CRYPTO_ASSET}\n"
            f"üìä –¢–µ–∫—É—â–∏–µ –ª–æ–≥–∏: {available_count} —à—Ç.\n\n"
            f"üìã –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ –ª–æ–≥–∏ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏):\n"
            f"–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: –ì–æ—Ç–æ–≤–æ"
        )
        return
    
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ª–æ—Ç—É
    if context.user_data.get("current_account_id") and msg and msg.lower() != "–≥–æ—Ç–æ–≤–æ":
        account_id = context.user_data["current_account_id"]
        db.add_credential(account_id, msg.strip())
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ª–æ–≥–∞
        await process_purchase_queue(context, account_id)
        
        left = db.count_available_credentials(account_id)
        account_info = db.get_account(account_id)
        lot_name = account_info[1] if account_info else "Unknown"
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"finish_refill_{account_id}")]
        ]
        await update.message.reply_text(
            f"‚úÖ –õ–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–æ—Ç!\n\n"
            f"üéÆ –õ–æ—Ç: {lot_name}\n"
            f"üìà –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {left} –ª–æ–≥–æ–≤\n\n"
            f"üîÑ –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    if msg.lower() == "–≥–æ—Ç–æ–≤–æ" and context.user_data.get("current_account_id"):
        account_id = context.user_data.pop("current_account_id")
        total = db.count_available_credentials(account_id)
        account_info = db.get_account(account_id)
        lot_name = account_info[1] if account_info else "Unknown"
        await update.message.reply_text(
            f"‚úÖ –õ–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!\n\n"
            f"üéÆ –ù–∞–∑–≤–∞–Ω–∏–µ: {lot_name}\n"
            f"üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total} –ª–æ–≥–æ–≤\n"
            f"üöÄ –õ–æ—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –ø–æ–∫—É–ø–æ–∫!"
        )
        return

async def add_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Add account handler"""
    if not _is_admin(update.effective_user):
        u = update.effective_user
        logger.warning(f"Admin denied: username=@{_normalize_username(getattr(u,'username',''))} id={getattr(u,'id',None)}")
        await update.message.reply_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    msg = update.message.text
    if msg == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ—Ç":
        context.user_data["awaiting_lot_data"] = True
        await update.message.reply_text(
            "üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–æ—Ç–∞:\n\n"
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–Ω–∞–∑–≤–∞–Ω–∏–µ_–ª–æ—Ç–∞|—Ü–µ–Ω–∞\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä:\n"
            "Steam –∞–∫–∫–∞—É–Ω—Ç—ã|150\n"
            "Fortnite –∞–∫–∫–∞—É–Ω—Ç—ã|200\n\n"
            "–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫ –Ω–µ–º—É –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ (–ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å, –ø–æ—á—Ç–∞ –∏ —Ç.–¥.)"
        )
        return

    try:
        if context.user_data.get("awaiting_lot_data") and "|" in msg:
            lot_name, price = msg.split("|")
            price = float(price)
            account_id = db.add_account(lot_name.strip(), price)
            context.user_data["awaiting_lot_data"] = False
            context.user_data["current_account_id"] = account_id
            await update.message.reply_text(
                f"‚úÖ –õ–æ—Ç #{account_id} —Å–æ–∑–¥–∞–Ω: {lot_name} ({price} {CRYPTO_ASSET})\n\n"
                f"üìã –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ª–æ—Ç–∞:\n"
                f"–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –ª–æ–≥—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                f"üí° –ü—Ä–∏–º–µ—Ä—ã –ª–æ–≥–æ–≤:\n"
                f"‚Ä¢ login123:password456\n"
                f"‚Ä¢ email@mail.com | pass123 | backup@mail.com\n"
                f"‚Ä¢ –õ–æ–≥–∏–Ω: user1, –ü–∞—Ä–æ–ª—å: 123456, –ü–æ—á—Ç–∞: mail@gmail.com\n\n"
                f"‚ûï –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ª–æ–≥–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: –ì–æ—Ç–æ–≤–æ"
            )
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ç–µ–∫—É—â–∏–π –ª–æ—Ç
        if context.user_data.get("current_account_id") and msg and msg.lower() != "–≥–æ—Ç–æ–≤–æ":
            account_id = context.user_data["current_account_id"]
            db.add_credential(account_id, msg.strip())
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–æ–≥–∞
            await process_purchase_queue(context, account_id)
            
            left = db.count_available_credentials(account_id)
            account_info = db.get_account(account_id)
            lot_name = account_info[1] if account_info else "Unknown"
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"finish_adding_{account_id}")]
            ]
            await update.message.reply_text(
                f"‚úÖ –õ–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üéÆ –õ–æ—Ç: {lot_name}\n"
                f"üìà –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: {left} —à—Ç.\n\n"
                f"üîÑ –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –ª–æ–≥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        if msg.lower() == "–≥–æ—Ç–æ–≤–æ" and context.user_data.get("current_account_id"):
            account_id = context.user_data.pop("current_account_id")
            total = db.count_available_credentials(account_id)
            account_info = db.get_account(account_id)
            lot_name = account_info[1] if account_info else "Unknown"
            price = account_info[2] if account_info else 0
            await update.message.reply_text(
                f"‚úÖ –õ–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
                f"üéÆ –ù–∞–∑–≤–∞–Ω–∏–µ: {lot_name}\n"
                f"üí∞ –¶–µ–Ω–∞: {price} {CRYPTO_ASSET}\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤: {total} —à—Ç.\n"
                f"üî¢ ID –ª–æ—Ç–∞: {account_id}\n\n"
                f"üöÄ –õ–æ—Ç —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏!"
            )
            return
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –æ–ø–∏—Å–∞–Ω–∏–µ|—Ü–µ–Ω–∞")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def update_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Update price handler"""
    if not _is_admin(update.effective_user):
        u = update.effective_user
        logger.warning(f"Admin denied: username=@{_normalize_username(getattr(u,'username',''))} id={getattr(u,'id',None)}")
        await update.message.reply_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    msg = update.message.text
    if msg == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É":
        context.user_data["awaiting_price_update"] = True
        await update.message.reply_text(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "ID|–Ω–æ–≤–∞—è_—Ü–µ–Ω–∞\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 1|2000"
        )
        return

    try:
        if "|" in msg:
            account_id, new_price = msg.split("|")
            account_id = int(account_id)
            new_price = float(new_price)
            
            if db.update_account_price(account_id, new_price):
                await update.message.reply_text(
                f"‚úÖ –¶–µ–Ω–∞ –ª–æ—Ç–∞ #{account_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
                f"üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price} {CRYPTO_ASSET}"
                )
            else:
                await update.message.reply_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ID|–Ω–æ–≤–∞—è_—Ü–µ–Ω–∞")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def confirm_rub_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä—É–±–ª–µ–≤–æ–π –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–æ–º"""
    if not _is_admin(update.effective_user):
        await update.message.reply_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    msg = update.message.text
    if msg == "üíµ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É":
        context.user_data["awaiting_payment_confirm"] = True
        await update.message.reply_text(
            "üíµ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä—É–±–ª–µ–≤–æ–π –æ–ø–ª–∞—Ç—ã\n\n"
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "ID_–ª–æ—Ç–∞|username_–ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä:\n"
            "1|username123\n"
            "5|buyer_name"
        )
        return
    
    if context.user_data.get("awaiting_payment_confirm") and "|" in msg:
        try:
            lot_id, username = msg.split("|")
            lot_id = int(lot_id.strip())
            username = username.strip().lstrip('@')
            
            # –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –≤ bot_data
            order_found = False
            order_key = None
            order_data = None
            
            for key, data in context.bot_data.items():
                if (key.startswith("rub_order_") and 
                    isinstance(data, dict) and 
                    data.get("account_id") == lot_id and 
                    data.get("username", "").lower() == username.lower()):
                    order_found = True
                    order_key = key
                    order_data = data
                    break
            
            if not order_found:
                await update.message.reply_text(
                    f"‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                    f"‚Ä¢ ID –ª–æ—Ç–∞: {lot_id}\n"
                    f"‚Ä¢ Username: {username}"
                )
                return
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏ –≤—ã–¥–∞–µ–º –ª–æ–≥
            user_id = order_data["user_id"]
            account = db.get_account(lot_id)
            
            if not account:
                await update.message.reply_text(f"‚ùå –õ–æ—Ç #{lot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –µ—Å—Ç—å queue_id
            queue_id = order_data.get("queue_id")
            if queue_id:
                db.update_queue_payment_status(user_id, lot_id, "", "paid")
            
            # –í—ã–¥–∞–µ–º –ª–æ–≥
            success, delivered_details, accounts_depleted = db.mark_account_sold(lot_id, user_id, order_data["price_usdt"])
            
            if success:
                # –û—Ç–º–µ—á–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                if queue_id:
                    db.mark_queue_entry_fulfilled(queue_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
                delivery_message = (
                    f"‚úÖ –û–ø–ª–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                    f"üéÆ –õ–æ—Ç #{lot_id}\n"
                    f"üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞: {delivered_details}\n"
                    f"üíµ –û–ø–ª–∞—á–µ–Ω–æ: {order_data['price_rub']} ‚ÇΩ\n\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ"
                )
                await context.bot.send_message(user_id, delivery_message)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                await update.message.reply_text(
                    f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                    f"üéÆ –õ–æ—Ç: #{lot_id}\n"
                    f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{username}\n"
                    f"üíµ –°—É–º–º–∞: {order_data['price_rub']} ‚ÇΩ\n"
                    f"üìù –í—ã–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {delivered_details}"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏—Å—Ç–æ—â–µ–Ω–∏–∏ –ª–æ—Ç–∞
                if accounts_depleted:
                    await notify_admin_about_depletion(context, lot_id)
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                context.bot_data.pop(order_key, None)
                context.user_data["awaiting_payment_confirm"] = False
                
            else:
                # –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–≥–æ–≤ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if not queue_id:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                    queue_id = db.add_to_purchase_queue(
                        user_id=user_id,
                        account_id=lot_id,
                        payment_type="rub",
                        price_usdt=order_data["price_usdt"],
                        price_rub=order_data["price_rub"],
                        username=username,
                        payment_status="paid"
                    )
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ bot_data
                    context.bot_data[order_key]["queue_id"] = queue_id
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ—á–µ—Ä–µ–¥–∏
                    db.update_queue_payment_status(user_id, lot_id, "", "paid")
                
                queue_size = db.get_queue_size(lot_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await context.bot.send_message(
                    user_id,
                    f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
                    f"üì¶ –õ–æ—Ç #{lot_id} —Å–µ–π—á–∞—Å –ø—É—Å—Ç\n"
                    f"üë• –í—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ!\n\n"
                    f"‚è≥ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –ø–æ–ø–æ–ª–Ω–∏—Ç –ª–æ—Ç, \n"
                    f"–≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç!"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                await update.message.reply_text(
                    f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (–û–ß–ï–†–ï–î–¨)!\n\n"
                    f"üéÆ –õ–æ—Ç: #{lot_id}\n"
                    f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{username}\n"
                    f"üíµ –°—É–º–º–∞: {order_data['price_rub']} ‚ÇΩ\n"
                    f"üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏ #{queue_size}"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                await notify_admin_about_depletion(context, lot_id)
                
                context.user_data["awaiting_payment_confirm"] = False
                await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–≥–æ–≤ –≤ —ç—Ç–æ–º –ª–æ—Ç–µ.")
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ID_–ª–æ—Ç–∞|username")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show lots statistics"""
    if not _is_admin(update.effective_user):
        await update.message.reply_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    statistics = db.get_all_lots_statistics()
    
    if not statistics:
        await update.message.reply_text("üìà –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_lots = len(statistics)
    total_logs = sum(s['total_logs'] for s in statistics)
    total_sold = sum(s['sold_logs'] for s in statistics)
    total_available = sum(s['available_logs'] for s in statistics)
    total_revenue = sum(s['total_revenue'] for s in statistics)
    
    summary_msg = (
        f"üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        f"üéÆ –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤: {total_lots}\n"
        f"üìã –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: {total_logs}\n"
        f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ: {total_sold}\n"
        f"üìé –î–æ—Å—Ç—É–ø–Ω–æ: {total_available}\n"
        f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue:.2f} {CRYPTO_ASSET}\n"
        f"üìâ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–¥–∞–∂: {(total_sold / total_logs * 100):.1f}%" if total_logs > 0 else "\n"
    )
    
    await update.message.reply_text(summary_msg)
    
    # –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–æ—Ç–∞–º
    for i, stats in enumerate(statistics[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ª–æ—Ç–æ–≤
        status_emoji = "üü¢" if stats['available'] else "üî¥"
        lot_msg = (
            f"{status_emoji} **–õ–æ—Ç #{stats['id']}: {stats['name']}**\n"
            f"üí∞ –¶–µ–Ω–∞: {stats['price']} {CRYPTO_ASSET}\n"
            f"üìã –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: {stats['total_logs']}\n"
            f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ: {stats['sold_logs']}\n"
            f"üìé –û—Å—Ç–∞–ª–æ—Å—å: {stats['available_logs']}\n"
            f"üíµ –î–æ—Ö–æ–¥: {stats['total_revenue']:.2f} {CRYPTO_ASSET}"
        )
        await update.message.reply_text(lot_msg)
    
    if len(statistics) > 10:
        await update.message.reply_text(f"‚Ä¶ –∏ –µ—â—ë {len(statistics) - 10} –ª–æ—Ç–æ–≤")

async def delete_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Delete account handler"""
    if not _is_admin(update.effective_user):
        u = update.effective_user
        logger.warning(f"Admin denied: username=@{_normalize_username(getattr(u,'username',''))} id={getattr(u,'id',None)}")
        await update.message.reply_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    msg = update.message.text
    if msg == "‚ùå –£–¥–∞–ª–∏—Ç—å –ª–æ—Ç":
        context.user_data["awaiting_account_delete"] = True
        await update.message.reply_text(
            "üóë –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ª–æ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 1"
        )
        return

    try:
        account_id = int(msg)
        if db.delete_account(account_id):
            await update.message.reply_text(f"‚úÖ –õ–æ—Ç #{account_id} —É–¥–∞–ª–µ–Ω!")
        else:
                await update.message.reply_text("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ ID –ª–æ—Ç–∞.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def handle_gift_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞"""
    text = update.message.text
    user = update.effective_user
    
    if text == "üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫":
        instructions = (
            f"üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç VEO3!\n\n"
            f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            f"‚Ä¢ –ù–∞–ø–∏—à–∏ 10 –Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ TikTok (—É—á–∏—Ç—ã–≤–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏–¥–µ–æ)\n"
            f"‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–ø–æ–º—è–Ω–∏ –Ω–∞—à –±–æ—Ç: @web4go_bot\n"
            f"‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ 10 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n"
            f"‚Ä¢ –ü—Ä–∏—à–ª–∏ –≤—Å–µ 10 —Å—Å—ã–ª–æ–∫ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∫–∞–∂–¥–∞—è –Ω–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)\n\n"
            f"‚ú® –ü—Ä–∏–º–µ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:\n"
            f"\"–î–∞, —Ç—ã —Å–∫–∞–∑–∞–ª –ø–æ —Ñ–∞–∫—Ç—É, –Ω–æ –º–Ω–µ –ø—Ä–æ—â–µ –ø–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞ @web4go_bot\" - —Ç–æ –µ—Å—Ç—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞ —Ç–æ, —á—Ç–æ –≤ –±–æ—Ç–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –∏ –ø—Ä–∏ —ç—Ç–æ–º –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –≤–∏–¥–µ–æ.\n\n"
            f"–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–æ–∫ –æ–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏, –∏ –≤ —Å–ª—É—á–∞–µ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ VEO3 —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –ë–ï–°–ü–õ–ê–¢–ù–û!\n\n"
            f"–ù–∏–∂–µ –ø—Ä–∏—à–ª–∏ 10 —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"
        )
        
        context.user_data["awaiting_gift_links"] = True
        await update.message.reply_text(instructions)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    if context.user_data.get("awaiting_gift_links"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫
        links = text.split('\n')
        tiktok_links = [link.strip() for link in links if 'tiktok.com' in link.lower() or 'vm.tiktok.com' in link.lower()]
        
        if len(tiktok_links) < 10:
            await update.message.reply_text(
                f"‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Å—ã–ª–æ–∫!**\n\n"
                f"üîç –ù–∞–π–¥–µ–Ω–æ: {len(tiktok_links)} —Å—Å—ã–ª–æ–∫ TikTok\n"
                f"üéØ –ù—É–∂–Ω–æ: 10 —Å—Å—ã–ª–æ–∫\n\n"
                f"üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ 10 —Å—Å—ã–ª–æ–∫ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
                parse_mode='Markdown'
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        username = user.username or f"id{user.id}"
        request_id = db.create_gift_request(user.id, username, text)
        context.user_data["awaiting_gift_links"] = False
        
        await update.message.reply_text(
            f"‚úÖ **–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!**\n\n"
            f"üî¢ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {request_id}\n"
            f"‚è≥ **–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º**\n\n"
            f"‚ú® –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫!",
            parse_mode='Markdown'
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
        admin_notification = (
            f"üîî **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫!**\n\n"
            f"üî¢ ID: {request_id}\n"
            f"üë§ –û—Ç: @{username}\n"
            f"üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫: {len(tiktok_links)}\n\n"
            f"üìÆ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –º–µ–Ω—é: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        if ADMIN_USER_ID:
            try:
                await context.bot.send_message(int(ADMIN_USER_ID), admin_notification, parse_mode='Markdown')
            except:
                pass

async def show_gift_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏"""
    if not _is_admin(update.effective_user):
        await update.message.reply_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    pending_requests = db.get_pending_gift_requests()
    
    if not pending_requests:
        await update.message.reply_text(
            f"üìÆ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫**\n\n"
            f"‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫!\n\n"
            f"üéâ –í—Å–µ –∑–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.",
            parse_mode='Markdown'
        )
        return
    
    keyboard = []
    for request in pending_requests:
        request_id, user_id, username, links, created_at = request
        links_count = len([link for link in links.split('\n') if 'tiktok.com' in link.lower()])
        
        keyboard.append([InlineKeyboardButton(
            f"üìÆ –ó–∞—è–≤–∫–∞ –æ—Ç @{username} ({links_count} —Å—Å—ã–ª–æ–∫)",
            callback_data=f"gift_request_{request_id}"
        )])
    
    await update.message.reply_text(
        f"üìÆ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫**\n\n"
        f"üìÑ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: **{len(pending_requests)}** –∑–∞—è–≤–æ–∫\n\n"
        f"üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def handle_gift_request_review(update: Update, context: ContextTypes.DEFAULT_TYPE, request_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    request = db.get_gift_request(request_id)
    if not request:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    request_id, user_id, username, links, created_at = request
    tiktok_links = [link.strip() for link in links.split('\n') if 'tiktok.com' in link.lower() or 'vm.tiktok.com' in link.lower()]
    
    request_text = (
        f"üìÆ **–ó–∞—è–≤–∫–∞ #{request_id}**\n\n"
        f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @{username}\n"
        f"üî¢ **User ID:** {user_id}\n"
        f"üìÖ **–î–∞—Ç–∞:** {created_at}\n"
        f"üîç **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫:** {len(tiktok_links)}\n\n"
        f"üîó **–°—Å—ã–ª–∫–∏:**\n"
    )
    
    for i, link in enumerate(tiktok_links[:10], 1):
        request_text += f"{i}. {link}\n"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_gift_{request_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_gift_{request_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_gift_requests")]
    ]
    
    await query.edit_message_text(
        request_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def process_gift_request_decision(update: Update, context: ContextTypes.DEFAULT_TYPE, request_id: int, action: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –ø–æ –∑–∞—è–≤–∫–µ"""
    query = update.callback_query
    await query.answer()
    
    request = db.get_gift_request(request_id)
    if not request:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    request_id, user_id, username, links, created_at = request
    admin_id = update.effective_user.id
    
    if action == "approve":
        # –û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É
        success = db.process_gift_request(request_id, "approved", admin_id)
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await send_gift_to_user(context, user_id)
            
            await query.edit_message_text(
                f"‚úÖ **–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!**\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
                parse_mode='Markdown'
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await context.bot.send_message(
                user_id,
                f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n"
                f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–∞!\n"
                f"üéÅ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!\n\n"
                f"üëá **–í–∞—à –ø–æ–¥–∞—Ä–æ–∫:**",
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.")
    
    elif action == "reject":
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É
        success = db.process_gift_request(request_id, "rejected", admin_id)
        if success:
            await query.edit_message_text(
                f"‚ùå **–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                f"üìù –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
                parse_mode='Markdown'
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await context.bot.send_message(
                user_id,
                f"üòî **–û—Ç–∫–∞–∑ –≤ –ø–æ–¥–∞—Ä–∫–µ**\n\n"
                f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n"
                f"üìù **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
                f"‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (10 —à—Ç.)\n"
                f"‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è @web4go_bot\n"
                f"‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏\n\n"
                f"üîÑ –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞!",
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.")

async def send_gift_to_user(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    gift = db.get_current_gift()
    
    if not gift:
        await context.bot.send_message(
            user_id,
            f"‚ùå **–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω**\n\n"
            f"üõ† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ø–æ–¥–∞—Ä–æ–∫.\n"
            f"üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode='Markdown'
        )
        return
    
    gift_type, content, file_id = gift
    
    if gift_type == 'text':
        await context.bot.send_message(user_id, content)
    elif gift_type == 'photo':
        await context.bot.send_photo(user_id, file_id, caption=content if content else None)
    elif gift_type == 'document':
        await context.bot.send_document(user_id, file_id, caption=content if content else None)
    elif gift_type == 'video':
        await context.bot.send_video(user_id, file_id, caption=content if content else None)
    elif gift_type == 'audio':
        await context.bot.send_audio(user_id, file_id, caption=content if content else None)

async def set_gift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞"""
    if not _is_admin(update.effective_user):
        await update.message.reply_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    context.user_data["awaiting_gift_setup"] = True
    await update.message.reply_text(
        f"üéÅ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∞—Ä–∫–∞**\n\n"
        f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª):\n\n"
        f"‚ú® **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
        f"‚Ä¢ –¢–µ–∫—Å—Ç\n"
        f"‚Ä¢ –§–æ—Ç–æ\n"
        f"‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç\n"
        f"‚Ä¢ –í–∏–¥–µ–æ\n"
        f"‚Ä¢ –ê—É–¥–∏–æ\n\n"
        f"üìù –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤—Å–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        parse_mode='Markdown'
    )

async def handle_gift_setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞"""
    if not context.user_data.get("awaiting_gift_setup"):
        return
    
    context.user_data["awaiting_gift_setup"] = False
    
    if update.message.text:
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫
        db.save_gift('text', update.message.text)
        await update.message.reply_text(
            f"‚úÖ **–ü–æ–¥–∞—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
            f"üìù –¢–∏–ø: –¢–µ–∫—Å—Ç\n"
            f"üí¨ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {update.message.text[:50]}{'...' if len(update.message.text) > 50 else ''}\n\n"
            f"üéÅ –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤—Å–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!",
            parse_mode='Markdown'
        )
    elif update.message.photo:
        # –§–æ—Ç–æ
        file_id = update.message.photo[-1].file_id
        caption = update.message.caption or ''
        db.save_gift('photo', caption, file_id)
        await update.message.reply_text(
            f"‚úÖ **–ü–æ–¥–∞—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
            f"üìù –¢–∏–ø: –§–æ—Ç–æ\n"
            f"üí¨ –ü–æ–¥–ø–∏—Å—å: {caption[:30]}{'...' if len(caption) > 30 else caption if caption else '–ù–µ—Ç'}\n\n"
            f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ –≥–æ—Ç–æ–≤!",
            parse_mode='Markdown'
        )
    elif update.message.document:
        # –î–æ–∫—É–º–µ–Ω—Ç
        file_id = update.message.document.file_id
        caption = update.message.caption or ''
        db.save_gift('document', caption, file_id)
        await update.message.reply_text(
            f"‚úÖ **–ü–æ–¥–∞—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
            f"üìù –¢–∏–ø: –î–æ–∫—É–º–µ–Ω—Ç\n"
            f"üìÅ –ò–º—è: {update.message.document.file_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üí¨ –ü–æ–¥–ø–∏—Å—å: {caption[:30]}{'...' if len(caption) > 30 else caption if caption else '–ù–µ—Ç'}\n\n"
            f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ –≥–æ—Ç–æ–≤!",
            parse_mode='Markdown'
        )
    elif update.message.video:
        # –í–∏–¥–µ–æ
        file_id = update.message.video.file_id
        caption = update.message.caption or ''
        db.save_gift('video', caption, file_id)
        await update.message.reply_text(
            f"‚úÖ **–ü–æ–¥–∞—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
            f"üìù –¢–∏–ø: –í–∏–¥–µ–æ\n"
            f"üí¨ –ü–æ–¥–ø–∏—Å—å: {caption[:30]}{'...' if len(caption) > 30 else caption if caption else '–ù–µ—Ç'}\n\n"
            f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ –≥–æ—Ç–æ–≤!",
            parse_mode='Markdown'
        )
    elif update.message.audio:
        # –ê—É–¥–∏–æ
        file_id = update.message.audio.file_id
        caption = update.message.caption or ''
        db.save_gift('audio', caption, file_id)
        await update.message.reply_text(
            f"‚úÖ **–ü–æ–¥–∞—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
            f"üìù –¢–∏–ø: –ê—É–¥–∏–æ\n"
            f"üí¨ –ü–æ–¥–ø–∏—Å—å: {caption[:30]}{'...' if len(caption) > 30 else caption if caption else '–ù–µ—Ç'}\n\n"
            f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ –≥–æ—Ç–æ–≤!",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            f"‚ùå **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
            f"üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç, –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ.\n"
            f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /setgift",
            parse_mode='Markdown'
        )

async def finish_adding_logs(update: Update, context: ContextTypes.DEFAULT_TYPE, account_id: int, mode: str):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data.pop("current_account_id", None)
    if mode == "adding":
        context.user_data.pop("awaiting_lot_data", None)
    
    total = db.count_available_credentials(account_id)
    account_info = db.get_account(account_id)
    lot_name = account_info[1] if account_info else "Unknown"
    price = account_info[2] if account_info else 0
    
    if mode == "adding":
        success_message = (
            f"‚úÖ –õ–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
            f"üéÆ –ù–∞–∑–≤–∞–Ω–∏–µ: {lot_name}\n"
            f"üí∞ –¶–µ–Ω–∞: {price} {CRYPTO_ASSET}\n"
            f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤: {total} —à—Ç.\n"
            f"üî¢ ID –ª–æ—Ç–∞: {account_id}\n\n"
            f"üöÄ –õ–æ—Ç —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏!"
        )
    else:  # refill
        success_message = (
            f"‚úÖ –õ–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!\n\n"
            f"üéÆ –ù–∞–∑–≤–∞–Ω–∏–µ: {lot_name}\n"
            f"üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total} –ª–æ–≥–æ–≤\n"
            f"üöÄ –õ–æ—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –ø–æ–∫—É–ø–æ–∫!"
        )
    
    await query.edit_message_text(success_message)

async def handle_crypto_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE, account_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É"""
    query = update.callback_query
    account = db.get_account(account_id)
    
    if not account:
        await query.edit_message_text("‚ùå –≠—Ç–æ—Ç –ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    available_count = db.count_available_credentials(account_id)
    user_id = update.effective_user.id
    username = update.effective_user.username or f"id{user_id}"
    
    # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    if available_count == 0:
        try:
            invoice = await create_crypto_invoice(
                price=account[2],
                user_id=user_id,
                account_id=account_id
            )
            
            if invoice.get("ok"):
                result = invoice.get("result", {})
                payment_url = result.get("pay_url")
                invoice_id = result.get("invoice_id") or result.get("id")
                
                if invoice_id:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ
                    queue_id = db.add_to_purchase_queue(
                        user_id=user_id,
                        account_id=account_id,
                        payment_type="crypto",
                        price_usdt=account[2],
                        username=username,
                        invoice_id=str(invoice_id),
                        payment_status="pending"
                    )
                    
                    context.bot_data[f"payment_{user_id}_{account_id}"] = {
                        "invoice_id": str(invoice_id),
                        "payment_type": "crypto",
                        "queue_id": queue_id
                    }
                    
                    queue_size = db.get_queue_size(account_id)
                    
                    payment_text = (
                        f"‚è≥ –õ–æ—Ç #{account_id} - –û–ß–ï–†–ï–î–¨\n\n"
                        f"üéÆ –ù–∞–∑–≤–∞–Ω–∏–µ: {account[1]}\n"
                        f"üí∞ –°—É–º–º–∞: {account[2]} {CRYPTO_ASSET}\n\n"
                        f"üì¶ –í –ª–æ—Ç–µ —Å–µ–π—á–∞—Å 0 –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
                        f"üë• –í—ã –≤ –æ—á–µ—Ä–µ–¥–∏: #{queue_size}\n\n"
                        f"üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
                        f"1Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ {CRYPTO_BOT_USERNAME}\n"
                        f"2Ô∏è‚É£ –í—Å—Ç–∞–Ω–µ—Ç–µ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ\n"
                        f"3Ô∏è‚É£ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –ø–æ–ø–æ–ª–Ω–∏—Ç –ª–æ—Ç - –ø–æ–ª—É—á–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç\n\n"
                        f"üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–¥–µ–ª–∫–∞ —á–µ—Ä–µ–∑ {CRYPTO_BOT_USERNAME}"
                    )
                    keyboard = [
                        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{account_id}")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_accounts")]
                    ]
                    await query.edit_message_text(payment_text, reply_markup=InlineKeyboardMarkup(keyboard))
                else:
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")
            else:
                error_text = invoice.get("error", {}).get("message") if isinstance(invoice.get("error"), dict) else invoice.get("description") or str(invoice)
                logger.error(f"Failed to create invoice: {error_text}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(f"Payment error: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_accounts")]])
            )
        return
    
    # –û–±—ã—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞, –∫–æ–≥–¥–∞ –∞–∫–∫–∞—É–Ω—Ç—ã –µ—Å—Ç—å
    if not account[3]:  # –ï—Å–ª–∏ –ª–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        await query.edit_message_text("‚ùå –≠—Ç–æ—Ç –ª–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    
    try:
        invoice = await create_crypto_invoice(
            price=account[2],
            user_id=user_id,
            account_id=account_id
        )
        
        if invoice.get("ok"):
            result = invoice.get("result", {})
            payment_url = result.get("pay_url")
            invoice_id = result.get("invoice_id") or result.get("id")
            if invoice_id:
                context.bot_data[f"payment_{user_id}_{account_id}"] = {
                    "invoice_id": str(invoice_id),
                    "payment_type": "crypto"
                }
            payment_text = (
                f"üìé –ü–æ–∫—É–ø–∫–∞ –ª–æ—Ç–∞ #{account_id}\n"
                f"üí∞ –°—É–º–º–∞: {account[2]} {CRYPTO_ASSET}\n\n"
                f"1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª –Ω–∏–∂–µ\n"
                f"2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ {CRYPTO_BOT_USERNAME}\n"
                f"3Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª\n\n"
                f"üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–¥–µ–ª–∫–∞ —á–µ—Ä–µ–∑ {CRYPTO_BOT_USERNAME}"
            )
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{account_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_accounts")]
            ]
            await query.edit_message_text(payment_text, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            error_text = invoice.get("error", {}).get("message") if isinstance(invoice.get("error"), dict) else invoice.get("description") or str(invoice)
            logger.error(f"Failed to create invoice: {error_text}")
            raise Exception("Failed to create invoice")
    except Exception as e:
        logger.error(f"Payment error: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_accounts")]])
        )

async def handle_rub_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE, account_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–∞ —Ä—É–±–ª–∏"""
    query = update.callback_query
    account = db.get_account(account_id)
    
    if not account:
        await query.edit_message_text("‚ùå –≠—Ç–æ—Ç –ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö
    rub_price = int(account[2] * USDT_TO_RUB_RATE)
    user_id = update.effective_user.id
    username = update.effective_user.username or "No_Username"
    
    available_count = db.count_available_credentials(account_id)
    
    # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    if available_count == 0:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Ä—É–±–ª–µ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        queue_id = db.add_to_purchase_queue(
            user_id=user_id,
            account_id=account_id,
            payment_type="rub",
            price_usdt=account[2],
            price_rub=rub_price,
            username=username,
            payment_status="pending"
        )
        
        context.bot_data[f"rub_order_{user_id}_{account_id}"] = {
            "account_id": account_id,
            "user_id": user_id,
            "username": username,
            "price_usdt": account[2],
            "price_rub": rub_price,
            "payment_type": "rub",
            "queue_id": queue_id
        }
        
        queue_size = db.get_queue_size(account_id)
        
        payment_text = (
            f"‚è≥ –õ–æ—Ç #{account_id} - –û–ß–ï–†–ï–î–¨ (RUBY)\n\n"
            f"üéÆ –ù–∞–∑–≤–∞–Ω–∏–µ: {account[1]}\n"
            f"üí∞ –¶–µ–Ω–∞ –≤ USDT: {account[2]} USDT\n"
            f"üíµ –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö: {rub_price} ‚ÇΩ\n"
            f"üìÖ –ö—É—Ä—Å: 1 USDT = {USDT_TO_RUB_RATE} ‚ÇΩ\n\n"
            f"üì¶ –í –ª–æ—Ç–µ —Å–µ–π—á–∞—Å 0 –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
            f"üë• –í—ã –≤ –æ—á–µ—Ä–µ–¥–∏: #{queue_size}\n\n"
            f"üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
            f"1Ô∏è‚É£ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ\n"
            f"2Ô∏è‚É£ –í—Å—Ç–∞–Ω–µ—Ç–µ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ\n"
            f"3Ô∏è‚É£ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –ø–æ–ø–æ–ª–Ω–∏—Ç –ª–æ—Ç - –ø–æ–ª—É—á–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç\n\n"
            f"üìû –î–ª—è –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {RUB_PAYMENT_CONTACT}\n"
            f"üìù –£–∫–∞–∂–∏—Ç–µ: ID –ª–æ—Ç–∞ {account_id}, username @{username}"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"https://t.me/{RUB_PAYMENT_CONTACT[1:]}")],
            [InlineKeyboardButton("üìà –ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ USDT", callback_data=f"buy_crypto_{account_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_accounts")]
        ]
        
        await query.edit_message_text(payment_text, reply_markup=InlineKeyboardMarkup(keyboard))
        return
    
    # –û–±—ã—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –∑–∞ —Ä—É–±–ª–∏, –∫–æ–≥–¥–∞ –∞–∫–∫–∞—É–Ω—Ç—ã –µ—Å—Ç—å
    if not account[3]:  # –ï—Å–ª–∏ –ª–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        await query.edit_message_text("‚ùå –≠—Ç–æ—Ç –ª–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    context.bot_data[f"rub_order_{user_id}_{account_id}"] = {
        "account_id": account_id,
        "user_id": user_id,
        "username": username,
        "price_usdt": account[2],
        "price_rub": rub_price,
        "payment_type": "rub"
    }
    
    payment_text = (
        f"üíµ –ü–æ–∫—É–ø–∫–∞ –ª–æ—Ç–∞ #{account_id} –∑–∞ —Ä—É–±–ª–∏\n\n"
        f"üéÆ –ù–∞–∑–≤–∞–Ω–∏–µ: {account[1]}\n"
        f"üí∞ –¶–µ–Ω–∞ –≤ USDT: {account[2]} USDT\n"
        f"üíµ –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö: {rub_price} ‚ÇΩ\n"
        f"üìÖ –ö—É—Ä—Å: 1 USDT = {USDT_TO_RUB_RATE} ‚ÇΩ\n\n"
        f"üìû –î–ª—è –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:\n"
        f"üëâ {RUB_PAYMENT_CONTACT}\n\n"
        f"üìù –£–∫–∞–∂–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:\n"
        f"‚Ä¢ ID –ª–æ—Ç–∞: {account_id}\n"
        f"‚Ä¢ –í–∞—à username: @{username}\n\n"
        f"‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–¥–∞—Å—Ç –≤–∞–º –ª–æ–≥!"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"https://t.me/{RUB_PAYMENT_CONTACT[1:]}")],
        [InlineKeyboardButton("üìà –ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ USDT", callback_data=f"buy_crypto_{account_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_accounts")]
    ]
    
    await query.edit_message_text(payment_text, reply_markup=InlineKeyboardMarkup(keyboard))

async def create_crypto_invoice(price: float, user_id: int, account_id: int) -> dict:
    """Create CryptoBot invoice"""
    import aiohttp
    import certifi
    
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN,
        "Content-Type": "application/json"
    }
    
    payload = {
        "asset": CRYPTO_ASSET,
        "amount": str(price),
        "description": f"–ü–æ–∫—É–ø–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ #{account_id}",
        # Store user and account in payload for webhook usage if configured
        "payload": f"{user_id}:{account_id}"
    }
    
    ssl_context = ssl.create_default_context(cafile=certifi.where())
    connector = aiohttp.TCPConnector(ssl=ssl_context)
    async with aiohttp.ClientSession(connector=connector) as session:
        async with session.post(
            f"{CRYPTO_BOT_API}/createInvoice",
            headers=headers,
            json=payload
        ) as resp:
            data = await resp.json()
            if not data.get('ok'):
                logger.error(f"CryptoBot createInvoice failed: status={resp.status}, body={data}")
            return data

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button callbacks"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_accounts":
        await show_accounts(update, context)
        return
    
    if query.data.startswith("back_to_account_"):
        account_id = int(query.data.split("_")[-1])
        account = db.get_account(account_id)
        if account:
            message = (
                f"üéÆ –ê–∫–∫–∞—É–Ω—Ç #{account_id}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {account[1]}\n"
                f"üí∞ –¶–µ–Ω–∞: {account[2]} RUB\n"
            )
            await query.edit_message_text(
                message,
                reply_markup=get_account_keyboard(account_id, account[2])
            )
        return
    
    if query.data.startswith("buy_crypto_"):
        account_id = int(query.data.split("_")[2])
        await handle_crypto_purchase(update, context, account_id)
        return
        
    if query.data.startswith("buy_rub_"):
        account_id = int(query.data.split("_")[2])
        await handle_rub_purchase(update, context, account_id)
        return
    
    if query.data.startswith("check_"):
        account_id = int(query.data.split("_")[1])
        await check_payment_status(update, context, account_id)
        return
    
    if query.data.startswith("finish_adding_"):
        account_id = int(query.data.split("_")[2])
        await finish_adding_logs(update, context, account_id, "adding")
        return
        
    if query.data.startswith("finish_refill_"):
        account_id = int(query.data.split("_")[2])
        await finish_adding_logs(update, context, account_id, "refill")
        return
    
    if query.data.startswith("gift_request_"):
        request_id = int(query.data.split("_")[2])
        await handle_gift_request_review(update, context, request_id)
        return
    
    if query.data.startswith("approve_gift_"):
        request_id = int(query.data.split("_")[2])
        await process_gift_request_decision(update, context, request_id, "approve")
        return
    
    if query.data.startswith("reject_gift_"):
        request_id = int(query.data.split("_")[2])
        await process_gift_request_decision(update, context, request_id, "reject")
        return
    
    if query.data == "back_to_gift_requests":
        await show_gift_requests(update, context)
        return

    # Legacy/unused branches removed: crypto_select_ and pay_

async def check_payment_status(update: Update, context: ContextTypes.DEFAULT_TYPE, account_id: int):
    """Check payment status and deliver account if paid"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
    account = db.get_account(account_id)
    if not account or not account[3]:
        await query.edit_message_text("‚ùå –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    
    try:
        crypto_bot = CryptoBot(CRYPTO_BOT_TOKEN)
        payment = context.bot_data.get(f"payment_{user_id}_{account_id}")
        
        if not payment:
            await query.edit_message_text(
                "‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_accounts")]])
            )
            return
        
        invoice_status = await crypto_bot.get_invoice_status(payment['invoice_id'])
        status = None
        try:
            items = invoice_status.get('result', {}).get('items') or []
            if items:
                status = items[0].get('status')
            else:
                status = invoice_status.get('result', {}).get('status')
        except Exception:
            status = None
        
        if status == 'paid':
            payment_data = context.bot_data.get(f"payment_{user_id}_{account_id}", {})
            queue_id = payment_data.get("queue_id")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ —ç—Ç–æ –ø–ª–∞—Ç–µ–∂ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            if queue_id:
                db.update_queue_payment_status(user_id, account_id, payment['invoice_id'], 'paid')
            
            success, delivered_details, accounts_depleted = db.mark_account_sold(account_id, user_id, account[2])
            if success:
                # –ú–æ—Ä–∫–Ω—É—Ç—å –∑–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                if queue_id:
                    db.mark_queue_entry_fulfilled(queue_id)
                
                await query.edit_message_text(
                    render_delivery_message(account_id, delivered_details or account[1], account[2])
                )
                context.bot_data.pop(f"payment_{user_id}_{account_id}", None)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
                if accounts_depleted:
                    await notify_admin_about_depletion(context, account_id)
            else:
                # –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–≥–æ–≤ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—á–µ—Ä–µ–¥—å
                if not queue_id:
                    # –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –≤ –æ—á–µ—Ä–µ–¥–∏, –¥–æ–±–∞–≤–ª—è–µ–º
                    username = update.effective_user.username or f"id{user_id}"
                    db.add_to_purchase_queue(
                        user_id=user_id,
                        account_id=account_id,
                        payment_type="crypto",
                        price_usdt=account[2],
                        username=username,
                        invoice_id=payment['invoice_id'],
                        payment_status="paid"
                    )
                    queue_size = db.get_queue_size(account_id)
                    await query.edit_message_text(
                        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
                        f"üì¶ –õ–æ—Ç #{account_id} —Å–µ–π—á–∞—Å –ø—É—Å—Ç\n"
                        f"üë• –í—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ!\n\n"
                        f"‚è≥ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –ø–æ–ø–æ–ª–Ω–∏—Ç –ª–æ—Ç, \n"
                        f"–≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç!"
                    )
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ –≤ –æ—á–µ—Ä–µ–¥–∏
                    await notify_admin_about_depletion(context, account_id)
                else:
                    # –ü–æ–∫—É–ø–∞—Ç–µ–ª—å —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    db.update_queue_payment_status(user_id, account_id, payment['invoice_id'], 'paid')
                    queue_size = db.get_queue_size(account_id)
                    await query.edit_message_text(
                        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
                        f"üë• –í—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ\n"
                        f"üì¶ –õ–æ—Ç #{account_id} —Å–µ–π—á–∞—Å –ø—É—Å—Ç\n\n"
                        f"‚è≥ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –ø–æ–ø–æ–ª–Ω–∏—Ç –ª–æ—Ç, \n"
                        f"–≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç!"
                    )
        else:
            await query.edit_message_text(
                "‚è≥ –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞\n\n–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{account_id}")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_accounts")]
                ])
            )
    except Exception as e:
        logger.error(f"Error checking payment: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_accounts")]])
        )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text messages"""
    text = update.message.text
    is_admin = _is_admin(update.effective_user)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if text == "üëÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ—Ç—ã":
        await show_accounts(update, context)
    elif text == "üîç –ü–æ–º–æ—â—å":
        await help_command(update, context)
    elif text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await update.message.reply_text(
            f"üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {PAYMENT_CONTACT}\n"
            "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7"
        )
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ—Ç" and is_admin:
        await add_account(update, context)
    elif text == "üîÑ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –ª–æ—Ç" and is_admin:
        await add_logs_to_existing_lot(update, context)
    elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É" and is_admin:
        await update_price(update, context)
    elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ª–æ—Ç" and is_admin:
        await delete_account(update, context)
    elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and is_admin:
        await show_statistics(update, context)
    elif text == "üíµ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É" and is_admin:
        await confirm_rub_payment(update, context)
    elif text == "üìÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫" and is_admin:
        await show_gift_requests(update, context)
    elif text == "üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫":
        await handle_gift_request(update, context)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    elif is_admin:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–∞
        if context.user_data.get("awaiting_lot_data"):
            await add_account(update, context)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∫ –ª–æ—Ç—É
        elif context.user_data.get("current_account_id"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω
            if context.user_data.get("awaiting_lot_data"):
                await add_account(update, context)
            else:
                await add_logs_to_existing_lot(update, context)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ª–æ—Ç–∞
        elif context.user_data.get("awaiting_lot_refill"):
            await add_logs_to_existing_lot(update, context)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã
        elif context.user_data.get("awaiting_price_update") and "|" in text:
            await update_price(update, context)
            context.user_data["awaiting_price_update"] = False
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        elif text.isdigit() and context.user_data.get("awaiting_account_delete"):
            await delete_account(update, context)
            context.user_data["awaiting_account_delete"] = False
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        elif context.user_data.get("awaiting_payment_confirm") and "|" in text:
            await confirm_rub_payment(update, context)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∞—Ä–∫–∞
        elif context.user_data.get("awaiting_gift_setup"):
            await handle_gift_setup(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏ –æ—Ç –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    elif context.user_data.get("awaiting_gift_links"):
        await handle_gift_request(update, context)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Log errors"""
    logger.error(f"Error: {context.error}")
    if update:
        await update.message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

async def handle_webhook(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle CryptoBot webhook"""
    try:
        data = json.loads(update.message.text)
        signature = data.get('signature')
        
        crypto_bot = CryptoBot(CRYPTO_BOT_TOKEN)
        if not crypto_bot.verify_webhook(data, signature):
            logger.error("Invalid webhook signature")
            return
        
        invoice_id = data.get('invoice_id')
        status = data.get('status')
        payload = data.get('payload', '')
        
        if status == 'paid':
            try:
                user_id, account_id = map(int, payload.split(':'))
                account = db.get_account(account_id)
                
                if account and account[3]:  # account[3] is available status
                    success, delivered_details = db.mark_account_sold(account_id, user_id, account[2])
                    if success:
                        await context.bot.send_message(
                            user_id,
                            render_delivery_message(account_id, delivered_details or account[1], account[2])
                        )
                        context.bot_data.pop(f"payment_{user_id}_{account_id}", None)
                    else:
                        logger.error(f"Failed to mark account {account_id} as sold")
                else:
                    logger.error(f"Account {account_id} not available")
            except Exception as e:
                logger.error(f"Error processing payment: {e}")
        
    except Exception as e:
        logger.error(f"Webhook error: {e}")

def main():
    """Start the bot"""
    application = Application.builder().token(BOT_TOKEN).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("whoami", whoami))
    application.add_handler(CommandHandler("make_me_admin", make_me_admin))
    application.add_handler(CommandHandler("test_purchase", test_purchase))
    application.add_handler(CommandHandler("setgift", set_gift))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # Handle text messages
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        handle_text
    ))
    
    # Handle CryptoBot webhook
    application.add_handler(MessageHandler(
        filters.Regex(r'^{.*}$'),  # JSON webhook data
        handle_webhook
    ))
    
    # Error handler
    application.add_error_handler(error_handler)

    # Start the bot
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
